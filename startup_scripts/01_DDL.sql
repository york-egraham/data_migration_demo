-- Create Users Table
CREATE TABLE system.users (
    id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          VARCHAR2(100) NOT NULL,
    email         VARCHAR2(255) UNIQUE NOT NULL
);
CREATE TABLE system.users_target (
                       id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       name          VARCHAR2(100) NOT NULL,
                       email         VARCHAR2(255) UNIQUE NOT NULL
);

-- Create Emails Table
CREATE TABLE system.emails (
    id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subject       VARCHAR2(255),
    body          VARCHAR(255),
    sent_date     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    from_user_id  NUMBER NOT NULL,
    CONSTRAINT fk_email_sender FOREIGN KEY (from_user_id) REFERENCES system.users(id) ON DELETE CASCADE
);
CREATE TABLE system.emails_target (
                        id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        subject       VARCHAR2(255),
                        body          VARCHAR(255),
                        sent_date     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        from_user_id  NUMBER NOT NULL,
                        CONSTRAINT fk_email_sender_t FOREIGN KEY (from_user_id) REFERENCES system.users_target(id) ON DELETE CASCADE
);

-- Create Email Recipients Table
CREATE TABLE system.email_recipients (
    id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email_id   NUMBER NOT NULL,
    user_id    NUMBER NOT NULL,
    recipient_type VARCHAR2(10) CHECK (recipient_type IN ('TO', 'CC', 'BCC')),
    CONSTRAINT fk_email FOREIGN KEY (email_id) REFERENCES system.emails(id) ON DELETE CASCADE,
    CONSTRAINT fk_recipient FOREIGN KEY (user_id) REFERENCES system.users(id) ON DELETE CASCADE
);
CREATE TABLE system.email_recipients_target (
                                  id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                  email_id   NUMBER NOT NULL,
                                  user_id    NUMBER NOT NULL,
                                  recipient_type VARCHAR2(10) CHECK (recipient_type IN ('TO', 'CC', 'BCC')),
                                  CONSTRAINT fk_email_t FOREIGN KEY (email_id) REFERENCES system.emails_target(id) ON DELETE CASCADE,
                                  CONSTRAINT fk_recipient_t FOREIGN KEY (user_id) REFERENCES system.users_target(id) ON DELETE CASCADE
);

CREATE OR REPLACE PROCEDURE system.send_email(
    p_subject    VARCHAR2,
    p_body       VARCHAR,
    p_from_user  NUMBER,
    p_to_users   SYS.ODCINUMBERLIST,  -- List of TO recipients
    p_cc_users   SYS.ODCINUMBERLIST,  -- List of CC recipients
    p_bcc_users  SYS.ODCINUMBERLIST   -- List of BCC recipients
) AS
    v_email_id NUMBER;
BEGIN
    -- Insert email into the emails table
    INSERT INTO system.emails (subject, body, from_user_id)
    VALUES (p_subject, p_body, p_from_user)
    RETURNING id INTO v_email_id;

    -- Insert TO recipients
    FOR i IN 1 .. p_to_users.COUNT LOOP
            INSERT INTO system.email_recipients (email_id, user_id, recipient_type)
            VALUES (v_email_id, p_to_users(i), 'TO');
        END LOOP;

    -- Insert CC recipients
    FOR i IN 1 .. p_cc_users.COUNT LOOP
            INSERT INTO system.email_recipients (email_id, user_id, recipient_type)
            VALUES (v_email_id, p_cc_users(i), 'CC');
        END LOOP;

    -- Insert BCC recipients
    FOR i IN 1 .. p_bcc_users.COUNT LOOP
            INSERT INTO system.email_recipients (email_id, user_id, recipient_type)
            VALUES (v_email_id, p_bcc_users(i), 'BCC');
        END LOOP;

    -- Commit the transaction
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Email Sent with ID: ' || v_email_id);
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        RAISE;
END send_email;
/

CREATE OR REPLACE PROCEDURE system.send_email_target(
    p_subject    VARCHAR2,
    p_body       VARCHAR,
    p_from_user  NUMBER,
    p_to_users   SYS.ODCINUMBERLIST,  -- List of TO recipients
    p_cc_users   SYS.ODCINUMBERLIST,  -- List of CC recipients
    p_bcc_users  SYS.ODCINUMBERLIST   -- List of BCC recipients
) AS
    v_email_id NUMBER;
BEGIN
    -- Insert email into the emails table
    INSERT INTO system.emails_target (subject, body, from_user_id)
    VALUES (p_subject, p_body, p_from_user)
    RETURNING id INTO v_email_id;

    -- Insert TO recipients
    FOR i IN 1 .. p_to_users.COUNT LOOP
            INSERT INTO system.email_recipients_target (email_id, user_id, recipient_type)
            VALUES (v_email_id, p_to_users(i), 'TO');
        END LOOP;

    -- Insert CC recipients
    FOR i IN 1 .. p_cc_users.COUNT LOOP
            INSERT INTO system.email_recipients_target (email_id, user_id, recipient_type)
            VALUES (v_email_id, p_cc_users(i), 'CC');
        END LOOP;

    -- Insert BCC recipients
    FOR i IN 1 .. p_bcc_users.COUNT LOOP
            INSERT INTO system.email_recipients_target (email_id, user_id, recipient_type)
            VALUES (v_email_id, p_bcc_users(i), 'BCC');
        END LOOP;

    -- Commit the transaction
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Email Sent with ID: ' || v_email_id);
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        RAISE;
END send_email_target;
/

COMMIT;
